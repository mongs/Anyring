{"./":{"url":"./","title":"概要说明","keywords":"","body":"ANYRING H5设计概要 本文档用于传控科技食物链条TM TALL的Anyring H5版前端设计概要说明文档。 此版本H5使用于 PC 端及pad端，PC端网页默认分为三列，pad端网页默认分为两列。 文档内容包含：前端项目的整体规划，布局规划，以及各主要模块的设计、布局、实现、测试等内容。 "},"1.整体规划/":{"url":"1.整体规划/","title":"第一章 整体规划","keywords":"","body":"整体规划 本章介绍项目的整体规划，包括： 项目的模块 布局规划 路由设计 目录约定 框架选择 资源仓库 MVP表等内容 "},"1.整体规划/1.功能模块划分/":{"url":"1.整体规划/1.功能模块划分/","title":"功能模块划分","keywords":"","body":"功能模块划分 项目的主要功能模块包括： 登录 日历 全屏 项目列表 某天的项目列表 项目详情 评分 交付物 Ring消息 报名 登录(signIn) 使用手机号、验证码登录，将来可以扩展到第三方登录（如：微信、微博、QQ、GitHub、钉钉等） 日历(calendar) 日历可选择月份、某天，如果某天上有项目，日期下方显示小圆点。点击某天，在日历下方的某天的项目列表显示当天的项目列表 全屏日历(full calendar) 大块状日历，类似OSX上的日历风格。日历上某天的方格内直接显示当前的项目列表，可以拖拽复制、删除、新增（导入wbs），点击方格内的某个项目可打开查看项目详情 项目列表(project list) 显示所有的项目，可进行过滤筛选、搜索等操作，筛选条件包括： 进行状态：未进行、已进行、正在进行 搜索使用模糊查询 某天项目列表(List of items for a certain day) 根据日历上选择的日期，显示当天的所有按照开始时间及指定优先级排序的项目列表，如果没有项目，显示默认项目等。 项目详情(project) 点击某天的项目列表中的某个项目，显示所选项目的详情。详情包含： 该项目参与的所有角色 角色的日程详情 Ring消息 评分(score) 通过节点中的评分插件，打开评分界面。在评分界面中可以查看评分项、评分项分值、评分规则等，可进行打分、提交打分等操作 交付物(deliverable) 在项目节点上上传提交的附件 交付物界面可以上传交付物、查看交付物、删除交付物 上传交付物时，可以选择某人check审核 查看交付物时，可以看到check情况（有谁需要我check，所有人的check状态等） Ring消息(ring) 项目内聊天系统。在项目详情页面，点击 Ring 图标打开Ring消息界面。消息界面内，可以查看历史聊天消息，消息的已读/未读状态，可以在输入框内@某人并输入文本内容，发送消息。 报名(signUp) 报名是一个相对较大的子系统。包含功能： 选手登录（手机号、验证码登录） 选手分步填写信息 审核管理员登录（账号、密码登录） 审核管理员查看报名项目列表，并进行审核（通过、不通过、退回） 审核管理员查看报名项目的详情，并进行审核（通过、不通过、退回） 注：审核管理员可能存在分级，如区级管理员、市级管理员。区级管理员审核通过后，市级管理员才会审核 "},"1.整体规划/2.整体布局规划/":{"url":"1.整体规划/2.整体布局规划/","title":"整体布局规划","keywords":"","body":"整体布局规划 此版本H5使用于 PC 端及pad端，PC端网页默认分为三列，pad端网页默认分为两列。 PC端 整体内容分两大块：1. 操作栏； 2. 内容区。 "},"1.整体规划/3.路由设计/":{"url":"1.整体规划/3.路由设计/","title":"路由设计","keywords":"","body":"路由设计 路由设计中，相对独立的界面，或影响数据获取的界面（如登录界面，只有登录后才能获取到其他的数据）采用独立的根路由。局部变化的内容采用子路由或动态路由（如：三列布局中的第三列采用子路由来展示特定内容） 因为home界面包含了项目中的核心部分，内容比较复杂。路由设计中，本着便于传播的设计理念（如：我现在查看的是项目5的401日程，那么我复制我的url给别人的时候，他直接看到的就应该也是项目5的401日程），会使用到hash，query，params及动态路由的方式来携带参数 路由 参数 说明 / 项目根路由，redirect到 /home /signIn type 登录界面，type 类别，如：选手登录、管理员登录标识 /home pid, rid 三列布局主页，pid 项目id，rid 角色id，采用 hash 的方式追加到 url 后，方便复制url时直接打开指定项目的指定日程 /home/files nid nid node 节点id /home/mvp pid mvp表，pid 项目id /home/ring pid ring消息，pid 项目id /home/score nid 评分，nid node节点 id /signUp/form 选手报名 /signUp/list 报名管理员查看项目列表 /signUp/detail 报名管理员查看项目详情 "},"1.整体规划/4.项目目录结构/":{"url":"1.整体规划/4.项目目录结构/","title":"项目目录结构","keywords":"","body":"项目目录结构 整体结构说明 . ├── README.md ├── babel.config.js # babel编译配置文件 ├── package.json # 项目配置文件，包含依赖包，scripts等 ├── postcss.config.js # stylus配置文件 ├── public # 静态资源 │ ├── favicon.ico │ ├── img │ │ └── icons │ ├── index.html # html页面 │ ├── manifest.json # 缓存配置文件 │ └── robots.txt ├── src │ ├── App.vue # 根文件 │ ├── assets # 静态资源 图片、样式等 │ │ ├── logo.png │ │ └── signIn │ │ └── bg.png │ ├── components # 组件 │ │ ├── Calendar # 组件名 │ │ │ ├── Calendar.vue # 组件 │ │ │ ├── api.js # 组件使用的api │ │ │ ├── calendar.js # 组件用到的非公用js │ │ │ └── calendar.styl # 组件用到的非公用样式 │ ├── config # 配置数据目录 │ │ ├── api.js # api相关数据，如接口名称，接口地址等 │ │ └── signIn.js # signIn使用到的配置数据 │ ├── main.js # 入口文件 配置router 依赖包 全局样式 axios vuex等 │ ├── plugins # 插件 │ │ └── vuetify.js │ ├── registerServiceWorker.js # ServiceWorker │ ├── router.js # 路由配置文件 │ ├── store.js # vuex数据仓库 │ ├── util # 自己使用的工具类目录 │ │ ├── base.js │ │ └── time.js │ └── views # 视图页面目录 │ ├── Project # project视图 │ │ ├── Project.vue │ │ └── api.js # 该视图页面使用到的api ├── vue.config.js # 配置webpack 及 api代理 └── yarn.lock views结构说明 SignIn 登录界面 Index.vue /home所对应的项目主界面 Project 主页中第二列，“多角色日程”列， 插入在Index.vue中 Ring ring消息列，主页的第三列中展示，插入在Index.vue中 Deliverable 交付物列，主页的第三列中展示，插入在Index.vue中 components结构说明 Navigation 主页中，左侧菜单栏组件，插入在Index.vue中 Calendar 日历组件，在主页的第一列展示，插入在Index.vue中 Projects 某天的项目列表组件，在主页的第一列中日历下方展示，插入在Index.vue中 public 与 src/assets的区别 public 不会被webpack打包处理，直接复制到最终目录下 assets 会经过webpack打包，重新编译 views 与 components的说明 views 与 components的结构是一致的 目录下存放当前的.vue文件及负责处理接口的 api.js views存放的是整个的页面视图，或者三列布局中的某一列 components 存放的是views中的某个组件（小模块） "},"1.整体规划/5.技术选型/":{"url":"1.整体规划/5.技术选型/","title":"技术选型","keywords":"","body":"技术选型 基础设施： 使用vue/cli 3.0脚手架生成项目的基础设施，也是目前相对稳定且先进的基础设施配置。 babel 编译es6+，eslint代码检测，并使用了Airbnb的代码规范，配合vscode 的prettier对代码进行格式化。CSS 预处理器选用了postcss stylus，使用了pwa。 @vue/cli 3.0 babel eslint airbnb prettier stylus pwa 框架模块选型 使用vue全家桶，及稳定流行模块。 设计语言选用google 的material design，基于此设计语言的框架中vuetify是实现组件比较丰富，且star数最多的，故选用此框架。只是组件设计并不友好，文档也写的像粑粑，bug 也不少T_T vue vue-router 管理路由 vuex 管理全局数据 axios 作为http处理模块，负责api处理。 vuetify 作为ui框架，是vue 版的material design实现 moment 时间处理库 material-design-icons-iconfont material design的图标库，需翻墙 "},"1.整体规划/6.资源仓库/":{"url":"1.整体规划/6.资源仓库/","title":"资源仓库","keywords":"","body":"资源仓库 代码仓库 mvp表仓库 gitbook "},"1.整体规划/7.mvp/":{"url":"1.整体规划/7.mvp/","title":"MVP表","keywords":"","body":"MVP表及计划进度 MVP表 "},"2.菜单栏/":{"url":"2.菜单栏/","title":"第二章 菜单栏模块","keywords":"","body":"菜单栏模块设计 1. 模块规划 菜单栏包含模块: 日历 项目(列表) 小程序二维码 登录 切换账号 2. 图标 图标 预览 date_range dns repeat dashboard account_circle 3. 布局及样式设计 菜单栏宽度60px, 高度是屏幕的高度, 固定到屏幕左侧, 添加右边框 4. 交互态 hover 改变元素的透明度为 .7 激活样式动态绑定class primary 和 white--text 5. 展开态 6. 动作触发交互 点击 日历 按钮，切换主页的 第一列 的显示隐藏 点击日程按钮，切换 项目列表 的显示隐藏 鼠标移入小程序， 显示小程序二维码（后期APP，网站等二维码采用同样的方式展示） 点击登录， 跳转登录界面， 如果已经登录，原登录框显示 切换账号 按钮，点击切换账号，同样跳转登录界面 点击logo，跳转官网 7. 使用组件 v-avatar logo使用 v-icon 图标使用 图标名称 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":""},"3.登录模块/":{"url":"3.登录模块/","title":"第三章 登录模块","keywords":"","body":"登录模块 手机号验证码登录 登录方式1：采用手机号、验证码登录（使用手机号、验证码登录，可以减少注册步骤） 手机号11位数字，验证码4位数字，有验证提示 手机号未正确填写， 获取验证码按钮 处于disable状态，不能发送验证码请求 点击 获取验证码 倒计时120秒，期间按钮处于disable状态，不能再次发送验证码请求 点击 现在登录 按钮，在页面的右上方会出现 snackbar 轻提示，成功 显示 success样式，失败显示 error 样式，参考v-snackbar组件文档 账号密码登录 登录方式2：采用账号、密码登录（注： 账号是系统为用户分配的特定账号） 账号、密码必填，有验证提示 点击 现在登录 按钮，在页面的右上方会出现 snackbar 轻提示，成功 显示 success样式，失败显示 error 样式，参考v-snackbar组件文档 第三方登录 第三方登录可以使用微信、微博、qq、钉钉账号等进行登录 详细设计待定... 核心组件 v-layout 布局组件 v-card 卡片组件 v-dialog 弹出框组件 v-form 表单组件 v-text-field 文本域组件 v-button 按钮组件 api 发送验证码api api地址：/api/user/smscode 参数： phone 手机号 登录api api地址，/api/user/signin 参数列表： client 见下方代码 用户登录client type 见下方代码 用户登录type data identifier 身份标识 手机号 credential 身份凭证 验证码 // 用户登录client export const SIGN_IN_CLIENTS = { mp: 0, h5: 1, android: 2, ios: 3, }; // 用户登录type export const SIGN_IN_TYPES = { mp: 0, phone: 1, email: 2, username: 3, wx: 4, wb: 5, }; // @/config/api.js // 登录api export const SIGN_IN = '/api/user/signin'; // 发送验证码api export const SEND_CODE = '/api/user/smscode'; 本地存储 登录成功后，会使用sessionStorage存储token，存储名称是anyringToken，关闭浏览器sessionStorage将被清空，每次打开都需要重新登录，确保账号的安全性。 "}}